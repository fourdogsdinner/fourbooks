{"version":3,"sources":["src/common/elements/EBurmese.js","src/common/elements/EAnimatedFlatList.js","src/common/components/Feed.js","SafeAreaView.web.tsx","useScrollToTop.tsx","src/common/screens/tab/Favorite.js"],"names":["EBurmese","src","className","font","useSettings","text","React","useMemo","window","knayi","fontConvert","style","whiteSpace","EAnimatedFlatList","data","renderItem","separatorHeight","headerHeight","NavComponent","keyExtractor","contentContainerStyle","ref","useRef","useScrollToTop","getKeys","useCallback","_","index","toString","Separator","height","scrollY","Animated","Value","current","clampedScrollY","interpolate","inputRange","outputRange","extrapolateLeft","y","diffClamp","onScroll","event","nativeEvent","contentOffset","useNativeDriver","length","flex","FlatList","paddingTop","ItemSeparatorComponent","scrollEventThrottle","View","transform","translateY","position","top","start","end","Feed","handlePress","bind","this","props","navigation","navigate","route","title","item","writer","serverId","onClick","backgroundColor","color","cursor","intro","PureComponent","edgeBitmaskMap","right","bottom","left","SafeAreaView","rest","insets","useSafeAreaInsets","edgeBitmask","edges","accum","appliedStyle","insetTop","insetRight","insetBottom","insetLeft","flatStyle","StyleSheet","mode","margin","marginVertical","marginHorizontal","marginTop","marginRight","marginBottom","marginLeft","padding","paddingVertical","paddingHorizontal","paddingRight","paddingBottom","paddingLeft","useNavigation","useRoute","e","isFocused","isFirst","requestAnimationFrame","scrollable","getScrollableNode","x","animated","offset","Favorite"],"mappings":"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","file":"static/js/6.a8c7a110.chunk.js","sourcesContent":["import React from \"react\";\r\nimport useSettings from \"~/utils/hooks/useSettings\";\r\n\r\nexport default function EBurmese({ src, className }) {\r\n  const { font } = useSettings();\r\n\r\n  const text = React.useMemo(\r\n    () => window.knayi.fontConvert(src, font),\r\n    [src, font]\r\n  );\r\n\r\n  return (\r\n    <span className={className} style={{ whiteSpace: \"pre-wrap\" }}>\r\n      {text}\r\n    </span>\r\n  );\r\n}\r\n","import { useScrollToTop } from \"@react-navigation/native\";\r\nimport React from \"react\";\r\nimport { Animated } from \"react-native\";\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\nimport ELoading from \"~/common/elements/ELoading\";\r\n\r\nexport default function EAnimatedFlatList({\r\n  data = [],\r\n  renderItem,\r\n  separatorHeight = 8,\r\n  headerHeight = 64,\r\n  NavComponent,\r\n  keyExtractor,\r\n  contentContainerStyle,\r\n}) {\r\n  // Scroll To Top\r\n  const ref = React.useRef(null);\r\n  useScrollToTop(ref);\r\n\r\n  const getKeys = React.useCallback((_, index) => index.toString(), []);\r\n\r\n  const Separator = React.useCallback(\r\n    () => <div style={{ height: separatorHeight }} />,\r\n    [separatorHeight]\r\n  );\r\n\r\n  // Show & Hide Navigation On scroll\r\n  const scrollY = React.useRef(new Animated.Value(0)).current;\r\n  const clampedScrollY = scrollY.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: [0, 1],\r\n    extrapolateLeft: \"clamp\",\r\n  });\r\n  const scrollYClamped = Animated.diffClamp(clampedScrollY, 0, headerHeight);\r\n  const y = scrollYClamped.interpolate({\r\n    inputRange: [0, headerHeight],\r\n    outputRange: [0, -headerHeight],\r\n  });\r\n  const onScroll = Animated.event(\r\n    [{ nativeEvent: { contentOffset: { y: scrollY } } }],\r\n    { useNativeDriver: true }\r\n  );\r\n\r\n  if (data.length === 0) {\r\n    return <ELoading />;\r\n  }\r\n\r\n  return (\r\n    <SafeAreaView style={{ flex: 1 }}>\r\n      <Animated.FlatList\r\n        ref={ref}\r\n        contentContainerStyle={[\r\n          {\r\n            paddingTop: headerHeight + separatorHeight,\r\n          },\r\n          contentContainerStyle,\r\n        ]}\r\n        ItemSeparatorComponent={Separator}\r\n        data={data}\r\n        renderItem={renderItem}\r\n        keyExtractor={keyExtractor || getKeys}\r\n        onScroll={onScroll}\r\n        scrollEventThrottle={16}\r\n      />\r\n      <Animated.View\r\n        style={{\r\n          transform: [{ translateY: y }],\r\n          position: \"absolute\",\r\n          top: 0,\r\n          start: 0,\r\n          end: 0,\r\n          height: headerHeight,\r\n        }}\r\n      >\r\n        {NavComponent}\r\n      </Animated.View>\r\n    </SafeAreaView>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport EBurmese from \"~/common/elements/EBurmese\";\r\n\r\nexport default class Feed extends React.PureComponent {\r\n  constructor() {\r\n    super();\r\n    this.handlePress = this.handlePress.bind(this);\r\n  }\r\n\r\n  handlePress() {\r\n    this.props.navigation.navigate(\r\n      this.props.route === \"Favorite\" ? \"FavoritePost\" : \"BookPost\",\r\n      {\r\n        title: this.props.item?.title,\r\n        writer: this.props.item?.writer || \"credit to original writer\",\r\n        serverId: this.props.item?.serverId,\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { item } = this.props;\r\n\r\n    return (\r\n      <div\r\n        className=\"card p-2\"\r\n        onClick={this.handlePress}\r\n        style={{\r\n          backgroundColor: \"inherit\",\r\n          color: \"inherit\",\r\n          cursor: \"pointer\",\r\n        }}\r\n        title={`click to read more about ${item?.title}`}\r\n      >\r\n        <div className=\"card-title\">\r\n          <EBurmese src={item?.title} />\r\n        </div>\r\n        <div className=\"card-subtitle fs-italic mb-1\">\r\n          {item?.writer || \"credit to original writer\"}\r\n        </div>\r\n        <p className=\"card-text\">\r\n          <EBurmese src={item?.intro} />\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useSafeAreaInsets } from './SafeAreaContext';\nimport type { Edge, NativeSafeAreaViewProps } from './SafeArea.types';\n\n// prettier-ignore\nconst TOP    = 0b1000,\n      RIGHT  = 0b0100,\n      BOTTOM = 0b0010,\n      LEFT   = 0b0001,\n      ALL    = 0b1111;\n\n/* eslint-disable no-bitwise */\n\nconst edgeBitmaskMap: Record<Edge, number> = {\n  top: TOP,\n  right: RIGHT,\n  bottom: BOTTOM,\n  left: LEFT,\n};\n\nexport function SafeAreaView({\n  style = {},\n  mode,\n  edges,\n  ...rest\n}: NativeSafeAreaViewProps) {\n  const insets = useSafeAreaInsets();\n\n  const edgeBitmask =\n    edges != null\n      ? edges.reduce((accum, edge) => accum | edgeBitmaskMap[edge], 0)\n      : ALL;\n\n  const appliedStyle = React.useMemo(() => {\n    const insetTop = edgeBitmask & TOP ? insets.top : 0;\n    const insetRight = edgeBitmask & RIGHT ? insets.right : 0;\n    const insetBottom = edgeBitmask & BOTTOM ? insets.bottom : 0;\n    const insetLeft = edgeBitmask & LEFT ? insets.left : 0;\n\n    const flatStyle = StyleSheet.flatten(style) as Record<string, number>;\n\n    if (mode === 'margin') {\n      const {\n        margin = 0,\n        marginVertical = margin,\n        marginHorizontal = margin,\n        marginTop = marginVertical,\n        marginRight = marginHorizontal,\n        marginBottom = marginVertical,\n        marginLeft = marginHorizontal,\n      } = flatStyle;\n\n      const marginStyle = {\n        marginTop: marginTop + insetTop,\n        marginRight: marginRight + insetRight,\n        marginBottom: marginBottom + insetBottom,\n        marginLeft: marginLeft + insetLeft,\n      };\n\n      return [style, marginStyle];\n    } else {\n      const {\n        padding = 0,\n        paddingVertical = padding,\n        paddingHorizontal = padding,\n        paddingTop = paddingVertical,\n        paddingRight = paddingHorizontal,\n        paddingBottom = paddingVertical,\n        paddingLeft = paddingHorizontal,\n      } = flatStyle;\n\n      const paddingStyle = {\n        paddingTop: paddingTop + insetTop,\n        paddingRight: paddingRight + insetRight,\n        paddingBottom: paddingBottom + insetBottom,\n        paddingLeft: paddingLeft + insetLeft,\n      };\n\n      return [style, paddingStyle];\n    }\n  }, [style, insets, mode, edgeBitmask]);\n\n  return <View style={appliedStyle} {...rest} />;\n}\n","import { EventArg, useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\n\ntype ScrollOptions = { x?: number; y?: number; animated?: boolean };\n\ntype ScrollableView =\n  | { scrollToTop(): void }\n  | { scrollTo(options: ScrollOptions): void }\n  | { scrollToOffset(options: { offset?: number; animated?: boolean }): void }\n  | { scrollResponderScrollTo(options: ScrollOptions): void };\n\ntype ScrollableWrapper =\n  | { getScrollResponder(): React.ReactNode }\n  | { getNode(): ScrollableView }\n  | ScrollableView;\n\nfunction getScrollableNode(ref: React.RefObject<ScrollableWrapper>) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if (\n    'scrollToTop' in ref.current ||\n    'scrollTo' in ref.current ||\n    'scrollToOffset' in ref.current ||\n    'scrollResponderScrollTo' in ref.current\n  ) {\n    // This is already a scrollable node.\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    // If the view is a wrapper like FlatList, SectionList etc.\n    // We need to use `getScrollResponder` to get access to the scroll responder\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n    // we need to use `getNode` to get the ref to the actual scrollview.\n    // Note that `getNode` is deprecated in newer versions of react-native\n    // this is why we check if we already have a scrollable node above.\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(\n  ref: React.RefObject<ScrollableWrapper>\n) {\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  React.useEffect(() => {\n    let current = navigation;\n\n    // The screen might be inside another navigator such as stack nested in tabs\n    // We need to find the closest tab navigator and add the listener there\n    while (current && current.getState().type !== 'tab') {\n      current = current.getParent();\n    }\n\n    if (!current) {\n      return;\n    }\n\n    const unsubscribe = current.addListener(\n      // We don't wanna import tab types here to avoid extra deps\n      // in addition, there are multiple tab implementations\n      // @ts-expect-error\n      'tabPress',\n      (e: EventArg<'tabPress', true>) => {\n        // We should scroll to top only when the screen is focused\n        const isFocused = navigation.isFocused();\n\n        // In a nested stack navigator, tab press resets the stack to first screen\n        // So we should scroll to top only when we are on first screen\n        const isFirst =\n          navigation === current ||\n          navigation.getState().routes[0].key === route.key;\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          const scrollable = getScrollableNode(ref) as ScrollableWrapper;\n\n          if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n            if ('scrollToTop' in scrollable) {\n              scrollable.scrollToTop();\n            } else if ('scrollTo' in scrollable) {\n              scrollable.scrollTo({ x: 0, y: 0, animated: true });\n            } else if ('scrollToOffset' in scrollable) {\n              scrollable.scrollToOffset({ offset: 0, animated: true });\n            } else if ('scrollResponderScrollTo' in scrollable) {\n              scrollable.scrollResponderScrollTo({ y: 0, animated: true });\n            }\n          }\n        });\n      }\n    );\n\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}\n","import { useNavigation } from \"@react-navigation/native\";\r\nimport React from \"react\";\r\nimport Feed from \"~/common/components/Feed\";\r\nimport EFlatList from \"~/common/elements/EAnimatedFlatList\";\r\n\r\nexport default function Favorite() {\r\n  // Renderer\r\n  const navigation = useNavigation();\r\n\r\n  const renderItem = React.useCallback(({ item }) => (\r\n    <Feed item={item} navigation={navigation} route={\"Favorite\"} />\r\n  ));\r\n\r\n  return <EFlatList data={[]} renderItem={renderItem} />;\r\n}\r\n"],"sourceRoot":""}